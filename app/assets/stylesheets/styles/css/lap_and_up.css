@charset "UTF-8";
/*------------------------------------*\
    LAP_AND_UP.CSS
\*------------------------------------*/
/**
 * Here we add any layout or other bits of styling specific to
 * the desktop and the tablet breakpoints.
 *
 * This is so phones which are often on bad internet connections
 * don't have to download all the extra css.
 */
/**
 * Setup
 */
/*------------------------------------*\
    VARS.SCSS
\*------------------------------------*/
/**
 * Any variables you find set in inuit.cssâ€™ `_vars.scss` that you do not wish to
 * keep, simply redefine here. This means that if inuit.css, for example, sets
 * your `$base-font-size` at 16px and you wish it to be 14px, simply redeclare
 * that variable in this file. inuit.css ignores its own variables in favour of
 * using your own, so you can completely modify how inuit.css works without ever
 * having to alter the framework itself.
 */
/*------------------------------------*\
    $OBJECTS-AND-ABSTRACTIONS
\*------------------------------------*/
/**
 * All of inuit.cssâ€™ objects and abstractions are initially turned off by
 * default. This means that you start any project with as little as possible,
 * and introducing objects and abstractions is as simple as switching the
 * following variables to `true`.
 */
/*------------------------------------*\
    $OVERRIDES
\*------------------------------------*/
/**
 * Place any variables that should override inuit.css' defaults here.
 */
/*------------------------------------*\
    $COLOURS
\*------------------------------------*/
/*------------------------------------*\
    $SOUP OBJECTS AND ABSTRACTIONS
\*------------------------------------*/
/*------------------------------------*\
    $DEFAULTS
\*------------------------------------*/
/**
 * inuit.css’ default variables. Redefine these in your `_vars.scss` file (found
 * in the inuit.css-web-template) to override them.
 */
/*------------------------------------*\
    $DEBUG
\*------------------------------------*/
/**
 * Debug mode will visually highlight any potential markup/accessibility quirks
 * in the browser. Set to `true` or `false`.
 */
/*------------------------------------*\
    $BORDER-BOX
\*------------------------------------*/
/**
 * Do you want all elements to adopt `box-sizing:border-box;` as per
 * paulirish.com/2012/box-sizing-border-box-ftw ?
 */
/*------------------------------------*\
    $BASE
\*------------------------------------*/
/**
 * Base stuff
 */
/**
 * Base font-family.
 */
/**
 * Default colour for objects’ borders etc.
 */
/*------------------------------------*\
    $RESPONSIVE
\*------------------------------------*/
/**
 * Responsiveness?
 */
/**
 * Responsiveness for widescreen/high resolution desktop monitors and beyond?
 * Note: `$responsive` variable above must be set to true before enabling this.
 */
/**
 * Responsive push and pull produce a LOT of code, only turn them on if you
 * definitely need them.
 */
/**
 * Note: `$push` variable above must be set to true before enabling these.
 */
/**
 * Note: `$pull` variable above must be set to true before enabling these.
 */
/**
 * Tell inuit.css when breakpoints start.
 */
/*------------------------------------*\
    $FONT-SIZES
\*------------------------------------*/
/**
 * Font-sizes (in pixels). Refer to relevant sections for their implementations.
 */
/*------------------------------------*\
    $QUOTES
\*------------------------------------*/
/**
 * English quote marks?
 */
/**
 * If you want English quotes then please do not edit these; they’re only here
 * because Sass needs them.
 */
/**
 * If you need non-English quotes, please alter the following values accordingly:
 */
/*------------------------------------*\
    $BRAND
\*------------------------------------*/
/**
 * Brand stuff
 */
/**
 * How big would you like round corners to be by default?
 */
/*------------------------------------*\
    $OBJECTS AND ABSTRACTIONS
\*------------------------------------*/
/**
 * Which objects and abstractions would you like to use?
 */
/*------------------------------------*\
    $FRAMEWORK
\*------------------------------------*/
/**
 * inuit.css will work these next ones out for use within the framework.
 *
 * Assign our `$base-line-height` to a new spacing var for more transparency.
 */
/*------------------------------------*\
    $MIXINS
\*------------------------------------*/
/**
 * Create a fully formed type style (sizing and vertical rhythm) by passing in a
 * single value, e.g.:
 *
   `@include font-size(10px);`
 *
 * Thanks to @redclov3r for the `line-height` Sass:
 * twitter.com/redclov3r/status/250301539321798657
 */
/**
 * Style any number of headings in one fell swoop, e.g.:
 *
   .foo{
       @include headings(1, 3){
           color:#BADA55;
       }
    }
 *
 * With thanks to @lar_zzz, @paranoida, @rowanmanning and ultimately
 * @thierrylemoulec for refining and improving my initial mixin.
 */
/**
 * Create vendor-prefixed CSS in one go, e.g.
 *
   `@include vendor(border-radius, 4px);`
 *
 */
/**
 * Create CSS keyframe animations for all vendors in one go, e.g.:
 *
   .foo{
       @include vendor(animation, shrink 3s);
   }

   @include keyframe(shrink){
       from{
           font-size:5em;
       }
   }
 *
 * Courtesy of @integralist: twitter.com/integralist/status/260484115315437569
 */
/**
 * Force overly long spans of text to truncate, e.g.:
 *
   `@include truncate(100%);`
 *
 * Where `$truncation-boundary` is a united measurement.
 */
/**
 * CSS arrows!!! But... before you read on, you might want to grab a coffee...
 *
 * This mixin creates a CSS arrow on a given element. We can have the arrow
 * appear in one of 12 locations, thus:
 *
 *       01    02    03
 *    +------------------+
 * 12 |                  | 04
 *    |                  |
 * 11 |                  | 05
 *    |                  |
 * 10 |                  | 06
 *    +------------------+
 *       09    08    07
 *
 * You pass this position in along with a desired arrow color and optional
 * border color, for example:
 *
 * `@include arrow(top, left, red)`
 *
 * for just a single, red arrow, or:
 *
 * `@include arrow(bottom, center, red, black)`
 *
 * which will create a red triangle with a black border which sits at the bottom
 * center of the element. Call the mixin thus:
 *
   .foo{
       background-color:#BADA55;
       border:1px solid #ACE;
       @include arrow(top, left, #BADA55, #ACE);
   }
 *
 */
/**
 * Media query mixin.
 *
 * It’s not great practice to define solid breakpoints up-front, preferring to
 * modify your design when it needs it, rather than assuming you’ll want a
 * change at ‘mobile’. However, as inuit.css is required to take a hands off
 * approach to design decisions, this is the closest we can get to baked-in
 * responsiveness. It’s flexible enough to allow you to set your own breakpoints
 * but solid enough to be frameworkified.
 *
 * We define some broad breakpoints in our vars file that are picked up here
 * for use in a simple media query mixin. Our options are:
 *
 * palm
 * lap
 * lap-and-up
 * portable
 * desk
 * desk-wide
 *
 * Not using a media query will, naturally, serve styles to all devices.
 *
 * `@include media-query(palm){ [styles here] }`
 *
 * We work out your end points for you:
 */
/*------------------------------------*\
    SOUP_LAU.CSS
\*------------------------------------*/
/**
 * Same as soup.scss but for lap-and-up only.
 */
/**
 * Generic utility styles etc.
 */
/*------------------------------------*\
    $MIXINS
\*------------------------------------*/
/**
 * Media query for the device pixel ratio
 */
/**
 * Make a max-width mq with manual pixel values.
 */
/**
 * Size an svg icon, does width, height and background size
 */
/**
 * Go inline block
 */
/**
 * A container setup
 */
/**
 * Opacity
 */
/**
 * Disable text select
 */
/**
 * Makes an image a block and fluid
 */
/**
 * Objects and abstractions
 */
/*------------------------------------*\
    $CONTAINER
\*------------------------------------*/
/**
 * Make the container 960 on lap_and_up and the reset
 * again when we run out of width
 */
@media -sass-debug-info{filename{font-family:file\:\/\/\/Users\/joshangell\/Development\/soup\/styles\/scss\/soup\/objects\/_container_lau\.scss}line{font-family:\000039}}
.container {
  max-width: 960px;
  margin-left: auto;
  margin-right: auto;
  padding-left: 0;
  padding-right: 0;
}
@media only screen and (max-width: 1023px) {
@media -sass-debug-info{filename{font-family:file\:\/\/\/Users\/joshangell\/Development\/soup\/styles\/scss\/soup\/objects\/_container_lau\.scss}line{font-family:\000039}}
  .container {
    width: 100%;
    padding-left: 12px;
    padding-right: 12px;
  }
}

/**
 * She’s all yours, cap’n... Begin importing your stuff here.
 */
@media -sass-debug-info{filename{font-family:file\:\/\/\/Users\/joshangell\/Development\/soup\/styles\/scss\/lap_and_up\.scss}line{font-family:\0000328}}
#sidebar {
  max-width: 300px;
}
@media -sass-debug-info{filename{font-family:file\:\/\/\/Users\/joshangell\/Development\/soup\/styles\/scss\/lap_and_up\.scss}line{font-family:\0000330}}
#sidebar.affix {
  position: fixed;
  top: 24px;
  padding-right: 24px;
}
@media only screen and (min-width: 1200px) {
@media -sass-debug-info{filename{font-family:file\:\/\/\/Users\/joshangell\/Development\/soup\/styles\/scss\/lap_and_up\.scss}line{font-family:\0000330}}
  #sidebar.affix {
    padding-right: 48px;
  }
}

@media -sass-debug-info{filename{font-family:file\:\/\/\/Users\/joshangell\/Development\/soup\/styles\/scss\/lap_and_up\.scss}line{font-family:\0000338}}
#main {
  padding-left: 48px;
  float: right;
}

/*# sourceMappingURL=lap_and_up.css.map */
